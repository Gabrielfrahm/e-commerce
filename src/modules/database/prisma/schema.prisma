datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl", "linux-musl-arm64-openssl-3.0.x", "linux-musl-openssl-3.0.x"]
}

model User {
  id        String      @unique @default(uuid())
  name      String?
  email     String      @unique
  type      String
  password  String?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @default(now())
  deletedAt DateTime?
  UserToken UserToken[]
  UserCode  UserCode[]
  Cart      Cart[]
  Card      Card[]

  @@map("users")
}

model UserToken {
  id        String   @unique @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  token     String
  createdAt DateTime @default(now())

  @@map("userToken")
}

model UserCode {
  id        String   @unique @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  code      Int      @unique
  createdAt DateTime @default(now())

  @@map("userCode")
}

model Product {
  id              String            @unique @default(uuid())
  name            String            @unique
  description     String
  basePrice       Int
  taxRate         Int
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @default(now())
  deletedAt       DateTime?
  imageUrl        String?
  ProductVariants ProductVariants[]
  ProductCategory ProductCategory[]

  @@map("products")
}

model ProductVariants {
  id                       String                     @unique @default(uuid())
  productId                String
  product                  Product                    @relation(fields: [productId], references: [id], onDelete: Cascade)
  sku                      String                     @unique
  price                    Int
  promocionalPrice         Int
  stockQuantity            Int
  imageUrl                 String?
  createdAt                DateTime                   @default(now())
  updatedAt                DateTime                   @default(now())
  ProductVariantAttributes ProductVariantAttributes[]
  Cart                     Cart[]

  @@map("productVariants")
}

model ProductAttributes {
  id                       String                     @unique @default(uuid())
  name                     String
  ProductVariantAttributes ProductVariantAttributes[]

  @@map("productAttributes")
}

model ProductVariantAttributes {
  id                 String            @unique @default(uuid())
  productVariantId   String
  productVariant     ProductVariants   @relation(fields: [productVariantId], references: [id], onDelete: Cascade)
  productAttributeId String
  productAtrribute   ProductAttributes @relation(fields: [productAttributeId], references: [id], onDelete: Cascade)
  value              String

  @@map("productVariantAttributes")
}

model Category {
  id               String            @unique @default(uuid())
  name             String            @unique
  parentCategoryId String?
  category         Category?         @relation("ParentCategoryId", fields: [parentCategoryId], references: [id])
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @default(now())
  deletedAt        DateTime?
  Category         Category[]        @relation("ParentCategoryId")
  ProductCategory  ProductCategory[]

  @@map("categories")
}

model ProductCategory {
  productId  String
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  categoryId String
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@id([productId, categoryId])
  @@map("productCategories")
}

model Cart {
  productVariantId String
  productVariant   ProductVariants @relation(fields: [productVariantId], references: [id], onDelete: Cascade)
  quantity         Int
  userId           String
  user             User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt        DateTime        @default(now())

  @@id([productVariantId, userId])
  @@map("carts")
}

model Card {
  id             String @unique @default(uuid())
  userId         String
  user           User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  title          String
  number         String
  cardHolderName String
  year           Int
  month          Int
  code           String

  @@map("cards")
}
